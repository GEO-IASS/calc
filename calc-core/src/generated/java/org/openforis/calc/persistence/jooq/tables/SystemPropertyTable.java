/**
 * This class is generated by jOOQ
 */
package org.openforis.calc.persistence.jooq.tables;


import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;
import org.openforis.calc.persistence.jooq.CalcSchema;
import org.openforis.calc.persistence.jooq.Keys;
import org.openforis.calc.persistence.jooq.SystemPropertyTypeConverter;
import org.openforis.calc.persistence.jooq.tables.records.SystemPropertyRecord;
import org.openforis.calc.system.SystemProperty.TYPE;


/**
 * This class is generated by jOOQ.
 */
@Generated(
	value = {
		"http://www.jooq.org",
		"jOOQ version:3.6.2"
	},
	comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class SystemPropertyTable extends TableImpl<SystemPropertyRecord> {

	private static final long serialVersionUID = -1316437814;

	/**
	 * The reference instance of <code>calc.system_property</code>
	 */
	public static final SystemPropertyTable SYSTEM_PROPERTY = new SystemPropertyTable();

	/**
	 * The class holding records for this type
	 */
	@Override
	public Class<SystemPropertyRecord> getRecordType() {
		return SystemPropertyRecord.class;
	}

	/**
	 * The column <code>calc.system_property.id</code>.
	 */
	public final TableField<SystemPropertyRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaulted(true), this, "");

	/**
	 * The column <code>calc.system_property.name</code>.
	 */
	public final TableField<SystemPropertyRecord, String> NAME = createField("name", org.jooq.impl.SQLDataType.VARCHAR.nullable(false), this, "");

	/**
	 * The column <code>calc.system_property.type</code>.
	 */
	public final TableField<SystemPropertyRecord, TYPE> TYPE = createField("type", org.jooq.impl.SQLDataType.VARCHAR.nullable(false), this, "", new SystemPropertyTypeConverter());

	/**
	 * The column <code>calc.system_property.value</code>.
	 */
	public final TableField<SystemPropertyRecord, String> VALUE = createField("value", org.jooq.impl.SQLDataType.VARCHAR, this, "");

	/**
	 * Create a <code>calc.system_property</code> table reference
	 */
	public SystemPropertyTable() {
		this("system_property", null);
	}

	/**
	 * Create an aliased <code>calc.system_property</code> table reference
	 */
	public SystemPropertyTable(String alias) {
		this(alias, SYSTEM_PROPERTY);
	}

	private SystemPropertyTable(String alias, Table<SystemPropertyRecord> aliased) {
		this(alias, aliased, null);
	}

	private SystemPropertyTable(String alias, Table<SystemPropertyRecord> aliased, Field<?>[] parameters) {
		super(alias, CalcSchema.CALC, aliased, parameters, "");
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Identity<SystemPropertyRecord, Integer> getIdentity() {
		return Keys.IDENTITY_SYSTEM_PROPERTY;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public UniqueKey<SystemPropertyRecord> getPrimaryKey() {
		return Keys.SYSTEM_PROPERTY_PKEY;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public List<UniqueKey<SystemPropertyRecord>> getKeys() {
		return Arrays.<UniqueKey<SystemPropertyRecord>>asList(Keys.SYSTEM_PROPERTY_PKEY);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public SystemPropertyTable as(String alias) {
		return new SystemPropertyTable(alias, this);
	}

	/**
	 * Rename this table
	 */
	public SystemPropertyTable rename(String name) {
		return new SystemPropertyTable(name, null);
	}
}
