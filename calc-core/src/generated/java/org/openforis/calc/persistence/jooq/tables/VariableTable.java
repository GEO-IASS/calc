/**
 * This class is generated by jOOQ
 */
package org.openforis.calc.persistence.jooq.tables;


import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;
import org.openforis.calc.metadata.Variable.Scale;
import org.openforis.calc.persistence.jooq.CalcSchema;
import org.openforis.calc.persistence.jooq.Keys;
import org.openforis.calc.persistence.jooq.VariableScaleConverter;
import org.openforis.calc.persistence.jooq.tables.records.VariableRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
	value = {
		"http://www.jooq.org",
		"jOOQ version:3.6.2"
	},
	comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class VariableTable extends TableImpl<VariableRecord> {

	private static final long serialVersionUID = 551767890;

	/**
	 * The reference instance of <code>calc.variable</code>
	 */
	public static final VariableTable VARIABLE = new VariableTable();

	/**
	 * The class holding records for this type
	 */
	@Override
	public Class<VariableRecord> getRecordType() {
		return VariableRecord.class;
	}

	/**
	 * The column <code>calc.variable.id</code>.
	 */
	public final TableField<VariableRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaulted(true), this, "");

	/**
	 * The column <code>calc.variable.entity_id</code>.
	 */
	public final TableField<VariableRecord, Integer> ENTITY_ID = createField("entity_id", org.jooq.impl.SQLDataType.INTEGER, this, "");

	/**
	 * The column <code>calc.variable.input_value_column</code>.
	 */
	public final TableField<VariableRecord, String> INPUT_VALUE_COLUMN = createField("input_value_column", org.jooq.impl.SQLDataType.VARCHAR.length(255), this, "");

	/**
	 * The column <code>calc.variable.scale</code>. Quantitative: RATIO|INTERVAL|OTHER
Categorical: NOMINAL|ORDINAL|BINARY
	 */
	public final TableField<VariableRecord, Scale> SCALE = createField("scale", org.jooq.impl.SQLDataType.VARCHAR.length(25).nullable(false), this, "Quantitative: RATIO|INTERVAL|OTHER\nCategorical: NOMINAL|ORDINAL|BINARY", new VariableScaleConverter());

	/**
	 * The column <code>calc.variable.name</code>.
	 */
	public final TableField<VariableRecord, String> NAME = createField("name", org.jooq.impl.SQLDataType.VARCHAR.length(255).nullable(false), this, "");

	/**
	 * The column <code>calc.variable.original_id</code>.
	 */
	public final TableField<VariableRecord, Integer> ORIGINAL_ID = createField("original_id", org.jooq.impl.SQLDataType.INTEGER, this, "");

	/**
	 * The column <code>calc.variable.default_value</code>.
	 */
	public final TableField<VariableRecord, String> DEFAULT_VALUE = createField("default_value", org.jooq.impl.SQLDataType.VARCHAR.length(255), this, "");

	/**
	 * The column <code>calc.variable.multiple_response</code>.
	 */
	public final TableField<VariableRecord, Boolean> MULTIPLE_RESPONSE = createField("multiple_response", org.jooq.impl.SQLDataType.BOOLEAN.defaulted(true), this, "");

	/**
	 * The column <code>calc.variable.override</code>.
	 */
	public final TableField<VariableRecord, Boolean> OVERRIDE = createField("override", org.jooq.impl.SQLDataType.BOOLEAN.nullable(false), this, "");

	/**
	 * The column <code>calc.variable.degenerate_dimension</code>.
	 */
	public final TableField<VariableRecord, Boolean> DEGENERATE_DIMENSION = createField("degenerate_dimension", org.jooq.impl.SQLDataType.BOOLEAN.nullable(false).defaulted(true), this, "");

	/**
	 * The column <code>calc.variable.input_category_id_column</code>.
	 */
	public final TableField<VariableRecord, String> INPUT_CATEGORY_ID_COLUMN = createField("input_category_id_column", org.jooq.impl.SQLDataType.VARCHAR.length(255), this, "");

	/**
	 * The column <code>calc.variable.disaggregate</code>.
	 */
	public final TableField<VariableRecord, Boolean> DISAGGREGATE = createField("disaggregate", org.jooq.impl.SQLDataType.BOOLEAN.nullable(false).defaulted(true), this, "");

	/**
	 * The column <code>calc.variable.output_value_column</code>.
	 */
	public final TableField<VariableRecord, String> OUTPUT_VALUE_COLUMN = createField("output_value_column", org.jooq.impl.SQLDataType.VARCHAR.length(255), this, "");

	/**
	 * The column <code>calc.variable.caption</code>.
	 */
	public final TableField<VariableRecord, String> CAPTION = createField("caption", org.jooq.impl.SQLDataType.VARCHAR.length(255), this, "");

	/**
	 * The column <code>calc.variable.description</code>.
	 */
	public final TableField<VariableRecord, String> DESCRIPTION = createField("description", org.jooq.impl.SQLDataType.VARCHAR.length(1024), this, "");

	/**
	 * The column <code>calc.variable.sort_order</code>.
	 */
	public final TableField<VariableRecord, Integer> SORT_ORDER = createField("sort_order", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

	/**
	 * The column <code>calc.variable.variable_per_ha_id</code>.
	 */
	public final TableField<VariableRecord, Integer> VARIABLE_PER_HA_ID = createField("variable_per_ha_id", org.jooq.impl.SQLDataType.INTEGER, this, "");

	/**
	 * The column <code>calc.variable.category_level_id</code>.
	 */
	public final TableField<VariableRecord, Long> CATEGORY_LEVEL_ID = createField("category_level_id", org.jooq.impl.SQLDataType.BIGINT, this, "");

	/**
	 * The column <code>calc.variable.specie_category</code>.
	 */
	public final TableField<VariableRecord, Boolean> SPECIE_CATEGORY = createField("specie_category", org.jooq.impl.SQLDataType.BOOLEAN.defaulted(true), this, "");

	/**
	 * Create a <code>calc.variable</code> table reference
	 */
	public VariableTable() {
		this("variable", null);
	}

	/**
	 * Create an aliased <code>calc.variable</code> table reference
	 */
	public VariableTable(String alias) {
		this(alias, VARIABLE);
	}

	private VariableTable(String alias, Table<VariableRecord> aliased) {
		this(alias, aliased, null);
	}

	private VariableTable(String alias, Table<VariableRecord> aliased, Field<?>[] parameters) {
		super(alias, CalcSchema.CALC, aliased, parameters, "");
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Identity<VariableRecord, Integer> getIdentity() {
		return Keys.IDENTITY_VARIABLE;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public UniqueKey<VariableRecord> getPrimaryKey() {
		return Keys.VARIABLE_PKEY;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public List<UniqueKey<VariableRecord>> getKeys() {
		return Arrays.<UniqueKey<VariableRecord>>asList(Keys.VARIABLE_PKEY);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public List<ForeignKey<VariableRecord, ?>> getReferences() {
		return Arrays.<ForeignKey<VariableRecord, ?>>asList(Keys.VARIABLE__VARIABLE_ENTITY_FKEY, Keys.VARIABLE__VARIABLE_VARIABLE_PER_HA_FKEY, Keys.VARIABLE__VARIABLE_CATEGORY_LEVEL_FK);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public VariableTable as(String alias) {
		return new VariableTable(alias, this);
	}

	/**
	 * Rename this table
	 */
	public VariableTable rename(String name) {
		return new VariableTable(name, null);
	}
}
