/**
 * This class is generated by jOOQ
 */
package org.openforis.calc.persistence.jooq.tables.daos;


import java.util.List;

import javax.annotation.Generated;

import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;
import org.openforis.calc.persistence.jooq.tables.EquationTable;
import org.openforis.calc.persistence.jooq.tables.records.EquationRecord;


import org.openforis.calc.metadata.Equation;
/**
 * This class is generated by jOOQ.
 */
@Generated(
	value = {
		"http://www.jooq.org",
		"jOOQ version:3.6.2"
	},
	comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class EquationDao extends DAOImpl<EquationRecord, Equation, Long> {

	/**
	 * Create a new EquationDao without any configuration
	 */
	public EquationDao() {
		super(EquationTable.EQUATION, Equation.class);
	}

	/**
	 * Create a new EquationDao with an attached configuration
	 */
	public EquationDao(Configuration configuration) {
		super(EquationTable.EQUATION, Equation.class, configuration);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	protected Long getId(Equation object) {
		return object.getId();
	}

	/**
	 * Fetch records that have <code>id IN (values)</code>
	 */
	public List<Equation> fetchById(Long... values) {
		return fetch(EquationTable.EQUATION.ID, values);
	}

	/**
	 * Fetch a unique record that has <code>id = value</code>
	 */
	public Equation fetchOneById(Long value) {
		return fetchOne(EquationTable.EQUATION.ID, value);
	}

	/**
	 * Fetch records that have <code>list_id IN (values)</code>
	 */
	public List<Equation> fetchByListId(Long... values) {
		return fetch(EquationTable.EQUATION.LIST_ID, values);
	}

	/**
	 * Fetch records that have <code>code IN (values)</code>
	 */
	public List<Equation> fetchByCode(String... values) {
		return fetch(EquationTable.EQUATION.CODE, values);
	}

	/**
	 * Fetch records that have <code>equation IN (values)</code>
	 */
	public List<Equation> fetchByEquation(String... values) {
		return fetch(EquationTable.EQUATION.EQUATION_, values);
	}

	/**
	 * Fetch records that have <code>condition IN (values)</code>
	 */
	public List<Equation> fetchByCondition(String... values) {
		return fetch(EquationTable.EQUATION.CONDITION, values);
	}
}
