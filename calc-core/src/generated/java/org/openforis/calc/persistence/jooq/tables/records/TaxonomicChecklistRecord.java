/**
 * This class is generated by jOOQ
 */
package org.openforis.calc.persistence.jooq.tables.records;

/**
 * This class is generated by jOOQ.
 */
@javax.annotation.Generated(value    = {"http://www.jooq.org", "2.6.0"},
                            comments = "This class is generated by jOOQ")
@java.lang.SuppressWarnings("all")
public class TaxonomicChecklistRecord extends org.jooq.impl.UpdatableRecordImpl<org.openforis.calc.persistence.jooq.tables.records.TaxonomicChecklistRecord> {

	private static final long serialVersionUID = 1223324934;

	/**
	 * The table column <code>calc.taxonomic_checklist.checklist_id</code>
	 * <p>
	 * This column is part of the table's PRIMARY KEY
	 */
	public void setChecklistId(java.lang.Integer value) {
		setValue(org.openforis.calc.persistence.jooq.tables.TaxonomicChecklist.TAXONOMIC_CHECKLIST.CHECKLIST_ID, value);
	}

	/**
	 * The table column <code>calc.taxonomic_checklist.checklist_id</code>
	 * <p>
	 * This column is part of the table's PRIMARY KEY
	 */
	public java.lang.Integer getChecklistId() {
		return getValue(org.openforis.calc.persistence.jooq.tables.TaxonomicChecklist.TAXONOMIC_CHECKLIST.CHECKLIST_ID);
	}

	/**
	 * The table column <code>calc.taxonomic_checklist.checklist_id</code>
	 * <p>
	 * This column is part of the table's PRIMARY KEY
	 */
	public java.util.List<org.openforis.calc.persistence.jooq.tables.records.ObservationUnitRecord> fetchObservationUnitList() {
		return create()
			.selectFrom(org.openforis.calc.persistence.jooq.tables.ObservationUnit.OBSERVATION_UNIT)
			.where(org.openforis.calc.persistence.jooq.tables.ObservationUnit.OBSERVATION_UNIT.TAXONOMIC_CHECKLIST_ID.equal(getValue(org.openforis.calc.persistence.jooq.tables.TaxonomicChecklist.TAXONOMIC_CHECKLIST.CHECKLIST_ID)))
			.fetch();
	}

	/**
	 * The table column <code>calc.taxonomic_checklist.checklist_id</code>
	 * <p>
	 * This column is part of the table's PRIMARY KEY
	 */
	public java.util.List<org.openforis.calc.persistence.jooq.tables.records.TaxonRecord> fetchTaxonList() {
		return create()
			.selectFrom(org.openforis.calc.persistence.jooq.tables.Taxon.TAXON)
			.where(org.openforis.calc.persistence.jooq.tables.Taxon.TAXON.CHECKLIST_ID.equal(getValue(org.openforis.calc.persistence.jooq.tables.TaxonomicChecklist.TAXONOMIC_CHECKLIST.CHECKLIST_ID)))
			.fetch();
	}

	/**
	 * The table column <code>calc.taxonomic_checklist.checklist_name</code>
	 */
	public void setChecklistName(java.lang.String value) {
		setValue(org.openforis.calc.persistence.jooq.tables.TaxonomicChecklist.TAXONOMIC_CHECKLIST.CHECKLIST_NAME, value);
	}

	/**
	 * The table column <code>calc.taxonomic_checklist.checklist_name</code>
	 */
	public java.lang.String getChecklistName() {
		return getValue(org.openforis.calc.persistence.jooq.tables.TaxonomicChecklist.TAXONOMIC_CHECKLIST.CHECKLIST_NAME);
	}

	/**
	 * The table column <code>calc.taxonomic_checklist.checklist_label</code>
	 */
	public void setChecklistLabel(java.lang.String value) {
		setValue(org.openforis.calc.persistence.jooq.tables.TaxonomicChecklist.TAXONOMIC_CHECKLIST.CHECKLIST_LABEL, value);
	}

	/**
	 * The table column <code>calc.taxonomic_checklist.checklist_label</code>
	 */
	public java.lang.String getChecklistLabel() {
		return getValue(org.openforis.calc.persistence.jooq.tables.TaxonomicChecklist.TAXONOMIC_CHECKLIST.CHECKLIST_LABEL);
	}

	/**
	 * The table column <code>calc.taxonomic_checklist.checklist_description</code>
	 */
	public void setChecklistDescription(java.lang.String value) {
		setValue(org.openforis.calc.persistence.jooq.tables.TaxonomicChecklist.TAXONOMIC_CHECKLIST.CHECKLIST_DESCRIPTION, value);
	}

	/**
	 * The table column <code>calc.taxonomic_checklist.checklist_description</code>
	 */
	public java.lang.String getChecklistDescription() {
		return getValue(org.openforis.calc.persistence.jooq.tables.TaxonomicChecklist.TAXONOMIC_CHECKLIST.CHECKLIST_DESCRIPTION);
	}

	/**
	 * Create a detached TaxonomicChecklistRecord
	 */
	public TaxonomicChecklistRecord() {
		super(org.openforis.calc.persistence.jooq.tables.TaxonomicChecklist.TAXONOMIC_CHECKLIST);
	}
}
