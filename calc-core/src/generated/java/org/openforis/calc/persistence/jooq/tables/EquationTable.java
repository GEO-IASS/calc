/**
 * This class is generated by jOOQ
 */
package org.openforis.calc.persistence.jooq.tables;


import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;
import org.openforis.calc.persistence.jooq.CalcSchema;
import org.openforis.calc.persistence.jooq.Keys;
import org.openforis.calc.persistence.jooq.tables.records.EquationRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
	value = {
		"http://www.jooq.org",
		"jOOQ version:3.6.2"
	},
	comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class EquationTable extends TableImpl<EquationRecord> {

	private static final long serialVersionUID = 1475805757;

	/**
	 * The reference instance of <code>calc.equation</code>
	 */
	public static final EquationTable EQUATION = new EquationTable();

	/**
	 * The class holding records for this type
	 */
	@Override
	public Class<EquationRecord> getRecordType() {
		return EquationRecord.class;
	}

	/**
	 * The column <code>calc.equation.id</code>.
	 */
	public final TableField<EquationRecord, Long> ID = createField("id", org.jooq.impl.SQLDataType.BIGINT.nullable(false).defaulted(true), this, "");

	/**
	 * The column <code>calc.equation.list_id</code>.
	 */
	public final TableField<EquationRecord, Long> LIST_ID = createField("list_id", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

	/**
	 * The column <code>calc.equation.code</code>.
	 */
	public final TableField<EquationRecord, String> CODE = createField("code", org.jooq.impl.SQLDataType.VARCHAR.length(256), this, "");

	/**
	 * The column <code>calc.equation.equation</code>.
	 */
	public final TableField<EquationRecord, String> EQUATION_ = createField("equation", org.jooq.impl.SQLDataType.VARCHAR.length(2048).nullable(false), this, "");

	/**
	 * The column <code>calc.equation.condition</code>.
	 */
	public final TableField<EquationRecord, String> CONDITION = createField("condition", org.jooq.impl.SQLDataType.VARCHAR.length(2048), this, "");

	/**
	 * Create a <code>calc.equation</code> table reference
	 */
	public EquationTable() {
		this("equation", null);
	}

	/**
	 * Create an aliased <code>calc.equation</code> table reference
	 */
	public EquationTable(String alias) {
		this(alias, EQUATION);
	}

	private EquationTable(String alias, Table<EquationRecord> aliased) {
		this(alias, aliased, null);
	}

	private EquationTable(String alias, Table<EquationRecord> aliased, Field<?>[] parameters) {
		super(alias, CalcSchema.CALC, aliased, parameters, "");
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Identity<EquationRecord, Long> getIdentity() {
		return Keys.IDENTITY_EQUATION;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public UniqueKey<EquationRecord> getPrimaryKey() {
		return Keys.EQUATION_PKEY;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public List<UniqueKey<EquationRecord>> getKeys() {
		return Arrays.<UniqueKey<EquationRecord>>asList(Keys.EQUATION_PKEY);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public List<ForeignKey<EquationRecord, ?>> getReferences() {
		return Arrays.<ForeignKey<EquationRecord, ?>>asList(Keys.EQUATION__EQUATION_EQUATION_LIST_FK);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public EquationTable as(String alias) {
		return new EquationTable(alias, this);
	}

	/**
	 * Rename this table
	 */
	public EquationTable rename(String name) {
		return new EquationTable(name, null);
	}
}
