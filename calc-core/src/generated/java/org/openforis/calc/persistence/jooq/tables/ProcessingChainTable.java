/**
 * This class is generated by jOOQ
 */
package org.openforis.calc.persistence.jooq.tables;


import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;
import org.openforis.calc.engine.ParameterMap;
import org.openforis.calc.engine.Worker.Status;
import org.openforis.calc.persistence.jooq.CalcSchema;
import org.openforis.calc.persistence.jooq.Keys;
import org.openforis.calc.persistence.jooq.ParameterMapConverter;
import org.openforis.calc.persistence.jooq.WorkerStatusConverter;
import org.openforis.calc.persistence.jooq.tables.records.ProcessingChainRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
	value = {
		"http://www.jooq.org",
		"jOOQ version:3.6.2"
	},
	comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ProcessingChainTable extends TableImpl<ProcessingChainRecord> {

	private static final long serialVersionUID = -564183359;

	/**
	 * The reference instance of <code>calc.processing_chain</code>
	 */
	public static final ProcessingChainTable PROCESSING_CHAIN = new ProcessingChainTable();

	/**
	 * The class holding records for this type
	 */
	@Override
	public Class<ProcessingChainRecord> getRecordType() {
		return ProcessingChainRecord.class;
	}

	/**
	 * The column <code>calc.processing_chain.id</code>.
	 */
	public final TableField<ProcessingChainRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaulted(true), this, "");

	/**
	 * The column <code>calc.processing_chain.workspace_id</code>.
	 */
	public final TableField<ProcessingChainRecord, Integer> WORKSPACE_ID = createField("workspace_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

	/**
	 * The column <code>calc.processing_chain.parameters</code>.
	 */
	public final TableField<ProcessingChainRecord, ParameterMap> PARAMETERS = createField("parameters", org.jooq.impl.SQLDataType.CLOB, this, "", new ParameterMapConverter());

	/**
	 * The column <code>calc.processing_chain.caption</code>.
	 */
	public final TableField<ProcessingChainRecord, String> CAPTION = createField("caption", org.jooq.impl.SQLDataType.VARCHAR.length(255), this, "");

	/**
	 * The column <code>calc.processing_chain.description</code>.
	 */
	public final TableField<ProcessingChainRecord, String> DESCRIPTION = createField("description", org.jooq.impl.SQLDataType.VARCHAR.length(1024), this, "");

	/**
	 * The column <code>calc.processing_chain.status</code>.
	 */
	public final TableField<ProcessingChainRecord, Status> STATUS = createField("status", org.jooq.impl.SQLDataType.VARCHAR.length(255), this, "", new WorkerStatusConverter());

	/**
	 * The column <code>calc.processing_chain.common_script</code>.
	 */
	public final TableField<ProcessingChainRecord, String> COMMON_SCRIPT = createField("common_script", org.jooq.impl.SQLDataType.CLOB, this, "");

	/**
	 * Create a <code>calc.processing_chain</code> table reference
	 */
	public ProcessingChainTable() {
		this("processing_chain", null);
	}

	/**
	 * Create an aliased <code>calc.processing_chain</code> table reference
	 */
	public ProcessingChainTable(String alias) {
		this(alias, PROCESSING_CHAIN);
	}

	private ProcessingChainTable(String alias, Table<ProcessingChainRecord> aliased) {
		this(alias, aliased, null);
	}

	private ProcessingChainTable(String alias, Table<ProcessingChainRecord> aliased, Field<?>[] parameters) {
		super(alias, CalcSchema.CALC, aliased, parameters, "");
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Identity<ProcessingChainRecord, Integer> getIdentity() {
		return Keys.IDENTITY_PROCESSING_CHAIN;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public UniqueKey<ProcessingChainRecord> getPrimaryKey() {
		return Keys.PROCESSING_CHAIN_PKEY;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public List<UniqueKey<ProcessingChainRecord>> getKeys() {
		return Arrays.<UniqueKey<ProcessingChainRecord>>asList(Keys.PROCESSING_CHAIN_PKEY);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public List<ForeignKey<ProcessingChainRecord, ?>> getReferences() {
		return Arrays.<ForeignKey<ProcessingChainRecord, ?>>asList(Keys.PROCESSING_CHAIN__PROCESSING_CHAIN_WORKSPACE_FKEY);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public ProcessingChainTable as(String alias) {
		return new ProcessingChainTable(alias, this);
	}

	/**
	 * Rename this table
	 */
	public ProcessingChainTable rename(String name) {
		return new ProcessingChainTable(name, null);
	}
}
